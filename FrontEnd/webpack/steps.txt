This folder is used for taking notes about the process of configuring Webpack

+++ 1. Webpack basics +++

npm install webpack webpack-cli --save-dev
npm install webpack-merge
npm install webpack-dev-server --save-dev

"dev": "webpack serve --config webpack/webpack.dev.config.js --hot",
"prod": "webpack --config webpack/webpack.prod.config.js"

webpack.common.config.js
---
const path = require('path');
const common = {
  entry: './src/js/controllers/index.js',
  output: {
    path: path.resolve(__dirname, '../dist'),
    filename: 'bundle.js',
  },
};
module.exports = common;

webpack.dev.config.js
---
const path = require('path');
const { merge } = require('webpack-merge');
const common = require('./webpack.common.config');
module.exports = merge(common, {
  mode: 'development',
  devServer: {
    port: 8080,
    static: {
      directory: path.resolve(__dirname, '..'),
    },
    devMiddleware: {
      index: 'index.html',
      writeToDisk: true, // By default, dist folder is created in memory
    },
    client: {
      overlay: true,
    },
    liveReload: true,
  },
});

webpack.prod.config.js
---
const { merge } = require('webpack-merge');
const common = require('./webpack.common.config');
module.exports = merge(common, {
  mode: 'production',
});



+++ 2. Extract HTML +++

npm install html-webpack-plugin html-loader --save-dev

webpack.common.config.js
---
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { mainCwd } = require('./utils');
const common = {
  entry: mainCwd('src/js/controllers/index.js'),
  output: {
    path: mainCwd('dist'),
    filename: '[name].[contenthash:12].js',
  },
  module: {
    rules: [
      {
        test: /\.html$/i,
        loader: 'html-loader',
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      filename: 'index.html',
      template: mainCwd('index.html'),
    }),
  ],
};
module.exports = common;



+++ 3. Remove unneccessary files +++

When in dev mode, every time we change some things --> create more files
npm install clean-webpack-plugin --save-dev

webpack.common.config.js
---
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const { mainCwd } = require('./utils');
const common = {
  entry: mainCwd('src/js/controllers/index.js'),
  output: {
    path: mainCwd('dist'),
    filename: '[name].[contenthash:12].js',
  },
  module: {
    rules: [
      {
        test: /\.html$/i,
        loader: 'html-loader',
      },
    ],
  },
  plugins: [
    new CleanWebpackPlugin(), // This will clean the 'dist' folder on each build
    new HtmlWebpackPlugin({
      filename: 'index.html',
      template: mainCwd('index.html'),
    }),
  ],
};
module.exports = common;



+++ 4. CSS, SCSS configuration +++

npm install style-loader css-loader sass-loader node-sass --save-dev
npm install mini-css-extract-plugin --save-dev

webpack.dev.config.js
---
module: {
  rules: [
    {
      test: /\.scss$/,
      use: ['style-loader', 'css-loader', 'sass-loader'],
    },
  ],
}

webpack.prod.config.js
---
module: {
  rules: [
    {
      test: /\.scss$/,
      use: [
        MiniCssExtractPlugin.loader, // Extract CSS into separate files
        'css-loader', // Translates CSS into CommonJS
        'sass-loader', // Compiles Sass to CSS
      ],
    },
  ],
},
plugins: [
  new MiniCssExtractPlugin({
    filename: '[name].[contenthash:12].css', // Specify the output CSS filename
  }),
]



+++ 5. CSS Optimization for production +++

Remove duplicate code, make code shorter,...

npm install css-minimizer-webpack-plugin --save-dev

webpack.prod.config.js
---
optimization: {
  minimize: true,
  minimizer: [
    `...`, // Keep settings of Webpack
    new CssMinimizerPlugin({
      minimizerOptions: {
        preset: ['default', { discardComments: { removeAll: true } }],
      },
    }),
  ],
}



+++ 6. PostCSS +++

Support CSS on many browsers: -webkit,...

npm install autoprefixer postcss-loader --save-dev

webpack.prod.config.js
---
use: [
  MiniCssExtractPlugin.loader, // Extract CSS into separate files
  'css-loader', // Translates CSS into CommonJS
  'postcss-loader',
  'sass-loader', // Compiles Sass to CSS
]

Create more files

postcss.config.js
---
const AutoPrefixer = require('autoprefixer');
module.exports = {
  plugins: [AutoPrefixer],
};

.browserslist
---
last 10 versions


+++ 7. Remove unused CSS +++

npm install purgecss-webpack-plugin --save-dev

webpack.prod.config.js
---
plugins: [
  new MiniCssExtractPlugin({
    filename: '[name].[contenthash:12].css', // Specify the output CSS filename
  }),
  new PurgeCSSPlugin({
    paths: glob.sync(mainCwd('/src/**/*'), { nodir: true }),
  }),
],



+++ 8. Source Map +++

When something went wrong in your production code or web-dev-server, it helps you know where went wrong in development code
(For both CSS and JS)
You can use only Source Map in dev if you don't want expose you code

webpack.dev.config.js
---
devtool: 'eval-source-map', // faster than 'source-map' and good for development

webpack.prod.config.js
---
devtool: 'source-map'


+++ Optimization for JS +++
Section 5, 7, 8, 10

*** Increasing Browser support with Babel ***

npm install babel-loader @babel/core @babel/preset-env --save-dev
npm install core-js --save-dev

"dev": "BABEL_ENV=development webpack serve --config webpack/webpack.dev.config.js",
"devb": "BABEL_ENV=developmentbroad webpack serve --config webpack/webpack.dev.config.js",
"prod": "BABEL_ENV=production webpack --config webpack/webpack.prod.config.js"

.babelrc
---
{
  "env": {
    "development": {
      "presets": ["@babel/preset-env"]
    },
    "developmentbroad": {
      "presets": [
        [
          "@babel/preset-env",
          {
            "useBuiltIns": "usage",
            "corejs": {
              "version": 3,
              "proposals": true
            },
            "debug": true
          }
        ]
      ]
    },
    "production": {
      "presets": [
        [
          "@babel/preset-env",
          {
            "useBuiltIns": "usage",
            "corejs": {
              "version": 3,
              "proposals": true
            },
            "debug": true
          }
        ]
      ]
    }
  }
}


Babel makes use of file .browserslist
---
last 10 versions
---
> 1%

webpack.common.config.js
---
module: {
  rules: [
    {
      test: /\.js$/,
      exclude: /node_modules/,
      use: {
        loader: 'babel-loader'
      }
    }
  ]
}

*** Tree Shaking ***

optimization: {
  usedExports: true, // Tree shaken applied by default by Webpack in produciton mode
}

*** Applying Code Splittin and Lazy Loading to Production Code ***

-> Analyze Bundles
webpack.analyze.config.js
"bundle-analyzer": "BABEL_ENV=production webpack --config webpack/webpack.analyze.config.js"

-> Putting node_modules into its own bundle and code splitting
runtimeChunk: 'single',
splitChunks: {
  chunks: 'all',
  maxSize: Infinity,
  minSize: 2000,
  cacheGroups: {
    validator: {
      test: /[\\/]node_modules[\\/]validator[\\/]/,
      name: 'validator',
    },
    node_modules: {
      test: /[\\/]node_modules[\\/]/,
      name: 'node_modules',
      chunks: 'initial',
    },
    async: {
      test: /[\\/]node_modules[\\/]/,
      chunks: 'async',
      name(module, chunks) {
        return chunks.map(chunk => chunk.name).join('-');
      },
    },
  },
}
